 #include "Data.h"


/* this variable definition is to demonstrate how to share data between XGATE and S12X */


  Byte SCI_COUNTER=0;


//-----------------------------------任务机时间标识----------------------------------------





//-----------------------------------TEST ONLY----------------------------------------------------
Word i_test;
Word i_test_main;

float i_test_float;
unsigned long ID_TEST=0;
unsigned long ID_TEST1=0;
 Word  i_a;
Byte  DI_EN=1;



//数字量输入变量

Byte DI_Vale_TEXT[20];


//模拟量输入变量  原始AD值
Word AI_Vale_TEXT[20];


//模拟量输出变量
float AO_Vale_TEXT[6];      //设置占空比
word Fre_Vale_TEXT[6];     //设置频率

//数字量输出变量

Byte  DO_Vale_TEXT[20];


//---------------Global variable definition
Byte byPreConClsLable1;       //Pre contactor 1 close lable
Byte byPreConClsLable2;       //Pre contactor 2 close lable
Byte byPreConClsLable3;       //Pre contactor 3 close lable
Byte byPreConClsLable4;       //Pre contactor 4 close lable
Byte byBalanceLabel;          //Balancing lable
Byte byMotorStartLable;       //Motor start lable
Byte byDirection[8];             //Direction to MCM


//CAN1 
Byte bySelfState;             //Master or slave state of VCU itself
Byte byOtherState;            //Master or slave state of the other VCU
Byte bySelfStateTemp;         //Master or slave state of VCU itself, from IO     
Byte byDoor3State;            //Door3 status from other VCU
Byte byDoor4State;            //Door4 status from ohter VCU
Byte byContactCmd;            //Precharge, Main, auxiliary contact, pump request, need to send to the other VCU if this VCU is MASTER
Byte byContactReq;            //Precharge, Main, auxiliary contact, pump request, need to execute if this VCU is SLAVE
Byte byTrainSpeed;            //Train speed
float iMainsVoltage_BMS1;       //Mains_Voltage_Battery, BMS1
float iMainsVoltage_BMS2;       //Mains_Voltage_Battery, BMS2
float iMainsCurrent_BMS1;       //Mains_Current_Battery, BMS1
float iMainsCurrent_BMS2;       //Mains_Current_Battery, BMS2
Byte bySOC_BMS1 = 30;              //SOC,BMS1
Byte bySOC_BMS2 = 30;              //SOC,BMS2
Byte byHighTemp_BMS1;         //State_Temperature_High, BMS1, 3:invalid,>80c; 2:>65c; 1:>55c; 0:OK
Byte byHighTemp_BMS2;         //State_Temperature_High, BMS2, 3:invalid,>80c; 2:>65c; 1:>55c; 0:OK
Byte byLowTemp_BMS1;          //State_Temperature_Low, BMS1, 3:invalid,<-20c; 2:<-10c; 1:<0c; 0:OK
Byte byLowTemp_BMS2;          //State_Temperature_Low, BMS1, 3:invalid,<-20c; 2:<-10c; 1:<0c; 0:OK
Byte byOverDisCharge_BMS1;    //State_OverCharge, BMS1, 3:invalid,<2.0v; 2:<2.5v; 1:<2.8v; 0:OK
Byte byOverDisCharge_BMS2;    //State_OverCharge, BMS2, 3:invalid,<2.0v; 2:<2.5v; 1:<2.8v; 0:OK
Byte byOverCharge_BMS1;       //State_OverCharge, BMS1, 3:invalid,>4.0v; 2:>3.9v; 1:>3.65v; 0:OK
Byte byOverCharge_BMS2;       //State_OverCharge, BMS2, 3:invalid,>4.0v; 2:>3.9v; 1:>3.65v; 0:OK
Byte byVoltConsist_BMS1;      //State_VoltConsistence, BMS1, 3:invalid; 2:>150mv; 1:>100mv; 0:OK
Byte byVoltConsist_BMS2;      //State_VoltConsistence, BMS2, 3:invalid; 2:>150mv; 1:>100mv; 0:OK
Byte byCommFault_BMS1;        //State_Fault_HardwareComm_InCan, BMS1, 3:Danger; 2:Need repair at once; 1:Need maintenance; 0:OK
Byte byCommFault_BMS2;        //State_Fault_HardwareComm_InCan, BMS2, 3:Danger; 2:Need repair at once; 1:Need maintenance; 0:OK
Byte byTempControl_BMS1;      //State_temperature_control, BMS1, 3:Cooling; 2:Keep warm; 1: Heating; 0:Nothing
Byte byTempControl_BMS2;      //State_temperature_control, BMS2, 3:Cooling; 2:Keep warm; 1: Heating; 0:Nothing
Byte byChargingStat_BMS1;     //State_Charging_Battery, BMS1, 3:Reserved; 2:Finished; 1: Charging; 0:Not charging
Byte byChargingStat_BMS2;     //State_Charging_Battery, BMS2, 3:Reserved; 2:Finished; 1: Charging; 0:Not charging
Byte byBalanceStat_BMS1;      //State_Balance_Battery, BMS1, 3:Reserved; 2:Reserved; 1: Balancing; 0:Nothing
Byte byBalanceStat_BMS2;      //State_Balance_Battery, BMS2, 3:Reserved; 2:Reserved; 1: Balancing; 0:Nothing
Byte byCurStat_BMS1;          //State_Current, BMS1, 3:Reserved; 2:Charging overcurrent; 1: Discharging overcurrent; 0:OK
Byte byCurStat_BMS2;          //State_Current, BMS2, 3:Reserved; 2:Charging overcurrent; 1: Discharging overcurrent; 0:OK
Byte byInsStat_BMS1;          //State_Insulation, BMS1, 3:Very Serious; 2:Medium; 1: Slight; 0:OK
Byte byInsStat_BMS2;          //State_Insulation, BMS2, 3:Very Serious; 2:Medium; 1: Slight; 0:OK
Byte byReady_BMS1;            //State_Ready_Battery, BMS1, 3:Charging enable; 2:Discharging enable; 1: Checking; 0:Not ready
Byte byReady_BMS2;            //State_Ready_Battery, BMS2, 3:Charging enable; 2:Discharging enable; 1: Checking; 0:Not ready

Byte byChgPlugin_BMS1;        //DC or AC charging plug is in, BMS1, 1,4,5: plug is in; Others: plug not in 
Byte byChgPlugin_BMS2;        //DC or AC charging plug is in, BMS1, 1,4,5: plug is in; Others: plug not in
Byte byHVClsStat_BMS1;        //HV closing status, BMS1, 0:open; 1:colsed
Byte byHVClsStat_BMS2;        //HV closing status, BMS2, 0:open; 1:colsed

Byte bySOH_BMS1;              //SOH, BMS1, 1~100 = 1%~100%
Byte bySOH_BMS2;              //SOH, BMS2, 1~100 = 1%~100%
int iTotalCapacity_BMS1;      //TotalCapacity, BMS1, 10bits
int iTotalCapacity_BMS2;      //TotalCapacity, BMS2, 10bits

//Byte byReq_HVBreak_FromBMS1;  //Req_HVBreak_FromBMS1, 3:Reserved; 2:No req; 1: Break request; 0:Reserved    //shenmin
//Byte byReq_HVBreak_FromBMS2;  //Req_HVBreak_FromBMS2, 3:Reserved; 2:No req; 1: Break request; 0:Reserved    //shenmin

Byte byVCU_Ctrl_BMS1;         //VCU control byte to BMS1
Byte byVCU_Ctrl_BMS2;         //VCU control byte to BMS2

Byte byTractionBlk_BMS1;      //Traction block due to BMS1
Byte byTractionBlk_BMS2;      //Traction block due to BMS2

int  aiCurHeight[4];         //Height of suspension;

int aiMotorTorque[8];         //Torque of Motor1~8
int aiMotorRPM[8];            //RPM of Motor1~8
int aiMCMInputCur[8];         //Input current of MCM1~8
Byte abyMCMStat[8];           //Status of MCM1~8
Byte abyMCMLife[8];           //Life of MCM1~8    


//float aiContFrontVolt[8];       //Front voltage of contact 1~8
//Byte abyMotorTemp[8];         //Tepmerature of motor 1~8
//Byte abyMCMTemp[8];           //Tepmerature of MCM 1~8
//int aiMCMRectCur[8];          //MCM rectified current 1~8
//Byte abyMCMConStat[8];        //MCM contactor status 1~8
//Byte abyMotorErrCode[8];      //Motor error code 1~8

Byte byTractionComm;          //Tracion command
Byte byBreakComm;             //Brake command
Byte byForward;               //Forward.   if VCU2, forward is forward; if VCU3 forward is Backward
Byte byBackward;              //Backward.  if VCU2, Backward is Backward; if VCU3 Backward is forward
Byte byBrApplied;             //Brake is applied
//int iTBEffortRef;             //Traction brake efforts, reference
Byte byTrEffRef;              //Traction reference
Byte byBrEffRef;              //Brake reference
Byte byDoor1State;            //Door1 status from VCU2, door3 status for VCU3
Byte byDoor2State;            //Door2 status from VCU2,  door4 status for VCU3
Byte byTractionEnable;        //Default : 0, traction not enable; 1, Enable



int aiTargetTorque[8];        //Target torque of motor
int aiTargetRPM[8];           //Target RPM of motor
int aiDCVoltLmt[8];           //DC voltage limitation
int aiDCCurLmt[8];            //DC current limitation
Byte abyMotorCtrl[8];         //Motor control mode
Byte abyLifesign[8];          //Lifensign



//CAN2


Byte byDCACComm_1;            //DCAC1 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCDCComm_2;            //DCDC2 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCACComm_2;            //DCAC2 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCDCComm_3;            //DCDC3 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCACComm_3;            //DCAC3 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCDCComm_4;            //DCDC4 commmamd, 0x55:Start; 0xFF:Stop
Byte byDCACComm_4;            //DCAC4 commmamd, 0x55:Start; 0xFF:Stop
 Byte byDCDCComm_1;            //DCDC1 commmamd, 0x55:Start; 0xFF:Stop

#if 0    //shenmin
int iDCDC_Output_Volt_1;      //DCDC1 output voltage
int iDCDC_Output_Cur_1;       //DCAC1 output current
int iDCDC_Input_Volt_1;       //DCDC1 input voltage
Byte byDCDC_Temperature_1;    //DCDC1 temperature
Byte byDCDC_ErrCode_1;        //DCDC1 error code

int iDCAC_Output_Volt_1;      //DCAC1 output voltage
int iDCAC_Output_Cur_1;       //DCAC1 output current
Byte byDCAC_Temperature_1;    //DCAC1 temperature
Byte byDCAC_ErrCode_1;        //DCAC1 error code

int iDCDC_Output_Volt_2;      //DCDC2 output voltage
int iDCDC_Output_Cur_2;       //DCAC2 output current
int iDCDC_Input_Volt_2;       //DCDC2 input voltage
Byte byDCDC_Temperature_2;    //DCDC2 temperature
Byte byDCDC_ErrCode_2;        //DCDC2 error code

int iDCAC_Output_Volt_2;      //DCAC1 output voltage
int iDCAC_Output_Cur_2;       //DCAC1 output current
Byte byDCAC_Temperature_2;    //DCAC1 temperature
Byte byDCAC_ErrCode_2;        //DCAC1 error code

int iDCDC_Output_Volt_3;      //DCDC3 output voltage
int iDCDC_Output_Cur_3;       //DCAC3 output current
int iDCDC_Input_Volt_3;       //DCDC3 input voltage
Byte byDCDC_Temperature_3;    //DCDC3 temperature
Byte byDCDC_ErrCode_3;        //DCDC3 error code

int iDCAC_Output_Volt_3;      //DCAC1 output voltage
int iDCAC_Output_Cur_3;       //DCAC1 output current
Byte byDCAC_Temperature_3;    //DCAC1 temperature
Byte byDCAC_ErrCode_3;        //DCAC1 error code

int iDCDC_Output_Volt_4;      //DCDC4 output voltage
int iDCDC_Output_Cur_4;       //DCAC4 output current
int iDCDC_Input_Volt_4;       //DCDC4 input voltage
Byte byDCDC_Temperature_4;    //DCDC4 temperature
Byte byDCDC_ErrCode_4;        //DCDC4 error code

int iDCAC_Output_Volt_4;      //DCAC1 output voltage
int iDCAC_Output_Cur_4;       //DCAC1 output current
Byte byDCAC_Temperature_4;    //DCAC1 temperature
Byte byDCAC_ErrCode_4;        //DCAC1 error code
#endif    //shenmin

//CAN3
Byte byCommand1;              //Commmand 1 to VCU5/6/7/8
Byte byCommand2;              //Commmand 2 to VCU5/6/7/8
int iDestHeight;              //Destinate height from VCU2/3

Byte byBrakeTest;             //Brake test command from HMI
Byte bySuspensionTest;        //Suspension test command from HMI
Byte byBalanceTemp;           //Balance command from HMI
Byte byBalance;               //Balance command to suspension
Byte byCamera;                //Active camera from HMI
Byte byEnergySaving;          //Energy saving
Byte byMotorStart;            //Motor Start
Byte byParking;               //Parking status

#if 0   //shenmin
int iPump_Pressure_VCU5;
int iCylinder_Pressure_VCU5;
int iEnergy_Saving_VCU5;
int iBrakeEffort_VCU5;

int iPump_Pressure_VCU6;
int iCylinder_Pressure_VCU6;
int iEnergy_Saving_VCU6;
int iBrakeEffort_VCU6;

int iPump_Pressure_VCU7;
int iCylinder_Pressure_VCU7;
int iEnergy_Saving_VCU7 ;
int iBrakeEffort_VCU7;

int iPump_Pressure_VCU8;
int iCylinder_Pressure_VCU8;
int iEnergy_Saving_VCU8 ;
int iBrakeEffort_VCU8;
#endif   //shenmin